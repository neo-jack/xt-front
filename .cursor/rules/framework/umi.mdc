---
description: Umi MPA (Multi-Page Application) best practices and patterns
globs: **/*.tsx, **/*.jsx, **/*.ts, **/*.js, .umirc.ts, config/*.ts
alwaysApply: false
---

# Umi MPA Best Practices

## Page Structure and Organization

### Entry File Convention

- Each page entry should be in `src/pages/*/index.[jt]sx?`
- Each page directory becomes a separate HTML entry
- Keep pages independent and self-contained
- Avoid routing logic - use direct page navigation

### Directory Structure

```text
src/
├── pages/
│   ├── home/
│   │   ├── index.tsx          # Main entry
│   │   ├── config.json        # Page config
│   │   └── assets/            # Page-specific assets
│   ├── about/
│   │   └── index.tsx
│   └── contact/
│       └── index.tsx
└── shared/                    # Shared components and utilities
```

## Page Configuration

### Configuration Methods

1. **config.json in page directory**

```json
{
  "title": "Home Page",
  "layout": false,
  "template": "./custom-template.html"
}
```

1. **Export config from entry file**

```typescript
// src/pages/home/index.tsx
export const config = {
  title: 'Home Page',
  layout: false,
  template: './custom-template.html'
};

export default function HomePage() {
  return <div>Home Content</div>;
}
```

1. **Global configuration in .umirc.ts**

```typescript
export default {
  mpa: {
    template: 'src/template.html',
    entry: {
      'home': {
        title: 'Home Page'
      }
    }
  }
};
```

### Configuration Options

- `title`: Page title for HTML head
- `layout`: Global layout component or false to disable
- `template`: Custom HTML template path
- `getConfigFromEntryFile`: Enable config export from entry files

## Entry File Patterns

### Basic Page Component

```typescript
// Simple page export
export default function HomePage() {
  return (
    <div>
      <h1>Welcome to Home Page</h1>
      <p>This is a standalone page in MPA mode.</p>
    </div>
  );
}
```

### Page with Configuration

```typescript
// Page with inline config
export const config = {
  title: 'Dashboard',
  layout: '@/layouts/DashboardLayout'
};

export default function Dashboard() {
  return <div>Dashboard Content</div>;
}
```

### Page with React 18 Features
```typescript
import { useState, useEffect } from 'react';

export const config = {
  title: 'Interactive Page'
};

export default function InteractivePage() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Page-specific data loading
    fetchPageData().then(setData);
  }, []);

  return (
    <div>
      <h1>Interactive Features</h1>
      {data ? <DataDisplay data={data} /> : <Loading />}
    </div>
  );
}
```

## Multi-Page Navigation

### Navigation Patterns
- Use `window.location.href` for page navigation
- Implement proper page-to-page state transfer via URL params or localStorage
- Avoid SPA routing patterns - embrace full page reloads
- Use anchor tags for proper linking between pages

### Navigation Examples
```typescript
// Direct navigation
const navigateToAbout = () => {
  window.location.href = '/about.html';
};

// Navigation with parameters
const navigateWithParams = (userId: string) => {
  window.location.href = `/profile.html?userId=${userId}`;
};

// Navigation with state transfer
const navigateWithState = (data: any) => {
  localStorage.setItem('transferData', JSON.stringify(data));
  window.location.href = '/dashboard.html';
};
```

## Asset Management

### Page-Specific Assets
- Keep page-specific assets in page directories
- Use dynamic imports for page-specific code
- Implement proper webpack entry configuration for shared assets
- Optimize assets per page rather than globally

### Asset Organization
```typescript
// Page-specific asset imports
import './home.less';
import homeImage from './assets/home-banner.jpg';

export default function HomePage() {
  return (
    <div className="home-page">
      <img src={homeImage} alt="Home Banner" />
    </div>
  );
}
```

## Development Workflow

### Selective Development
```bash
# Develop specific pages only
MPA_FILTER=home,about npm run dev

# Environment variable in .env
MPA_FILTER=dashboard
```

### Testing Strategies
- Test pages independently in isolation
- Implement page-specific testing strategies
- Use proper build optimization for multiple entries
- Mock inter-page dependencies appropriately

### Build Configuration
```typescript
// .umirc.ts
export default {
  mpa: {
    template: 'src/template.html',
    getConfigFromEntryFile: true,
    entry: {
      home: { title: 'Home' },
      about: { title: 'About Us' }
    }
  },
  targets: {
    chrome: 80
  },
  hash: true
};
```

## Template Customization

### Custom HTML Templates
```html
<!-- src/template.html -->
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
  <div id="root"></div>
</body>
</html>
```

### Template Variables
- Use template variables for dynamic content injection
- Implement proper meta tags per page
- Handle SEO requirements at page level
- Configure page-specific head elements

## Performance Optimization

### Bundle Optimization
- Optimize bundle size per page entry
- Avoid shared state between pages
- Implement proper lazy loading within pages
- Use page-specific analytics and tracking

### Code Splitting
```typescript
// Dynamic imports for page-specific modules
const loadPageModule = async () => {
  const module = await import('./heavy-module');
  return module.default;
};

export default function OptimizedPage() {
  const [module, setModule] = useState(null);

  useEffect(() => {
    loadPageModule().then(setModule);
  }, []);

  return <div>{module && <module.Component />}</div>;
}
```

### Performance Best Practices
- Minimize inter-page dependencies
- Use proper caching strategies for shared resources
- Implement page-specific error boundaries
- Optimize images and assets per page context

## Error Handling

### Page-Level Error Boundaries
```typescript
import { ErrorBoundary } from 'react-error-boundary';

function ErrorFallback({ error }: { error: Error }) {
  return <div>Page Error: {error.message}</div>;
}

export default function SafePage() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <PageContent />
    </ErrorBoundary>
  );
}
```

### Error Recovery
- Implement graceful error recovery per page
- Provide fallback UI for failed page loads
- Handle navigation errors appropriately
- Log page-specific errors for debugging

## SEO and Meta Management

### Page-Specific SEO
```typescript
export const config = {
  title: 'Product Details',
  meta: [
    { name: 'description', content: 'Product description...' },
    { property: 'og:title', content: 'Product Name' }
  ]
};
```

### Dynamic Meta Tags
- Configure meta tags per page requirements
- Implement proper Open Graph tags
- Handle structured data per page type
- Optimize for search engine indexing

## Migration from SPA

### Key Differences from SPA Mode
- No client-side routing
- No umi.js runtime
- No history API usage
- Independent page bundles

### Migration Steps
1. Restructure pages to MPA entry format
2. Replace routing with direct navigation
3. Move shared state to appropriate storage
4. Update build configuration for MPA mode
5. Test each page independently