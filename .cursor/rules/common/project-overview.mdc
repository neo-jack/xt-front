---
description: Guidelines for Current Project Tech Stack and Structure
globs: 
alwaysApply: true
---

# Project Specification

## Tech Stack

### Frontend Frameworks & Build Tools
*   **[React](mdc:https://react.dev) (v18.1.0)**: The core UI framework for the project.
*   **[Umi](mdc:https://umijs.org)**: Enterprise-class React application framework providing routing, build tools, and development server.
*   **[TypeScript](mdc:https://www.typescriptlang.org) (v4.7.2)**: The primary development language, adding static type checking to JavaScript.

### UI & Styling
*   **[Ant Design](mdc:https://ant.design)**: A comprehensive React UI library providing enterprise-class components.
*   **[Less](mdc:https://lesscss.org)**: CSS preprocessor for enhanced styling capabilities.

### State Management
*   **[Redux](mdc:https://redux.js.org)**: Predictable state container for JavaScript applications.
*   **[React Redux](mdc:https://react-redux.js.org)**: Official React bindings for Redux.

### HTTP Client & API Management
*   **[Axios](mdc:https://axios-http.com)**: Promise-based HTTP client for API requests.
*   **Custom HTTP Utils**: Centralized request/response interceptors with authentication and error handling.

### Development Tools

## Project Structure
```
├─ src/                              # Core source code
│  ├─ api/                           # API request services
│  │  └─ models/                     # API response type definitions
│  ├─ components/                    # Global reusable components
│  ├─ layouts/                       # Layout components
│  ├─ pages/                         # Page components (corresponding to routes)
│  ├─ services/                      # Business logic services
│  ├─ store/                         # Redux store configuration
│  ├─ types/                         # Global TypeScript type definitions
│  ├─ utils/                         # Utility functions
│  │  └─ http/                       # HTTP request utilities
│  ├─ app.tsx                        # Root application component
│  └─ global.less                    # Global styles
├─ .env                              # Environment variables file 
├─ .env.development                  # Development environment variables 
├─ .env.production                   # Production environment variables 
├─ .umirc.ts                         # Umi configuration file
├─ package.json                      # Project dependencies and scripts
└─ tsconfig.json                     # TypeScript configuration file
```

## Key Features & Architecture

### API Layer Architecture
- **Centralized HTTP Client**: Axios instance with request/response interceptors
- **Automatic Token Management**: JWT token automatically attached to requests
- **Unified Error Handling**: Consistent error messages and status handling
- **Type Safety**: Full TypeScript support for API requests and responses

### Authentication System
- **JWT-based Authentication**: Secure token-based user authentication
- **Route Protection**: Authentication guards for protected routes
- **Automatic Token Management**: Seamless user session handling

### Development Configuration
- **Environment Variables**: Separate configurations for development and production
- **Proxy Configuration**: API proxy setup for development environment
- **Hot Reload**: Fast development with automatic code recompilation

### Component Architecture
- **Reusable Components**: Modular component library
- **Layout System**: Consistent page layouts and navigation
- **Form Management**: Standardized form handling with validation
- **Table Components**: Data display with sorting, filtering, and pagination

### State Management
- **Redux Store**: Centralized application state management
- **Async Actions**: Redux middleware for handling asynchronous operations
- **Type-safe Actions**: Full TypeScript support for actions and reducers

### Styling Architecture
- **Ant Design Theme**: Consistent design system with customizable themes
- **Less Preprocessing**: Enhanced CSS with variables and mixins
- **Component-scoped Styles**: Modular styling approach
- **Responsive Design**: Mobile-friendly responsive layouts